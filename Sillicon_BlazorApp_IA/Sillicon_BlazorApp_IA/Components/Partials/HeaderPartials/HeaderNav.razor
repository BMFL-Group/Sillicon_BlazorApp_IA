@rendermode InteractiveServer

<div id="menu">
    <nav>
        <NavLink class="menu-link" href="/#overview">Overview</NavLink>
        <NavLink class="menu-link" href="/#features">Features</NavLink>
        <NavLink class="menu-link" href="/contact">Contact</NavLink>

        <AuthorizeView>
            <Authorized>
                <NavLink class="menu-link" href="/courses">Courses</NavLink>
            </Authorized>
        </AuthorizeView>

    </nav>
</div>

<div class="btn-switch">
    <span>Light</span>
    <label class="switch">
        <input type="checkbox" id="switchMode" checked="@IsDarkMode" role="checkbox" @onchange="ToggleDarkMode">
        <span class="slider round"></span>
    </label>
    <span>Dark</span>
</div>

<p>@IsDarkMode</p>

<div class="account-buttons">

    <AuthorizeView>
        <Authorized>
            <a class="user-logged-in" href="/Account/Manage"><img class="user-profile-pic" src="/uploads/user.ProfileImageUrl" alt="Profile picture of user.FirstName user.LastName"></a>
        </Authorized>
        <NotAuthorized>
            <NavLink class="btn-gray" href="/Account/Login?returnUrl=%2FAccount%2FManage"><i class="fa-solid fa-arrow-right-to-bracket"></i><span>Sign in</span></NavLink>
            <NavLink class="btn-theme" href="/Account/Register"><i class="fa-solid fa-user"></i>Sign up</NavLink>
        </NotAuthorized>
    </AuthorizeView>

</div>

@code {
    [Parameter]
    public bool IsDarkMode { get; set; }

    private async Task ToggleDarkMode()
    {
        IsDarkMode = await siteSettings?.ToggleDarkMode();
    }

  
    #region OLD CODE NOT USED
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     await LoadLocalStorageData();
    // }

    // private async Task LoadLocalStorageData()
    // {
    //     var CheckTheme = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "theme");
    //     if (CheckTheme == "dark")
    //     {
    //         IsDarkMode = true;
    //     }
    //     else
    //     {
    //         IsDarkMode = false;
    //     }       
    // }

    // private async Task SetItemInLocalStorage(string key, string value)
    // {
    //     await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, value);
    // }

    // private async Task ToggleDarkMode()
    // {
    //     IsDarkMode = !IsDarkMode;
    //     var themeString = IsDarkMode ? "dark" : "light";
    //     await SetItemInLocalStorage("theme", themeString);
        
    // }

    #endregion
}