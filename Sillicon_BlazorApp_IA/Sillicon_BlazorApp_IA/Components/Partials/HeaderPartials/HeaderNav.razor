@rendermode InteractiveServer

<div id="menu">
    <nav>
        <NavLink class="menu-link" href="/#overview">Overview</NavLink>
        <NavLink class="menu-link" href="/#features">Features</NavLink>
        <NavLink class="menu-link" href="/contact">Contact</NavLink>

        <AuthorizeView>
            <Authorized>
                <NavLink class="menu-link" href="/courses">Courses</NavLink>
            </Authorized>
        </AuthorizeView>

    </nav>
</div>

<div class="btn-switch">
    <span>Light</span>
    <label class="switch">
        <input type="checkbox" id="switchMode" checked="@(themeService.Theme == "dark"? true : false)" role="checkbox" @onchange="ToggleDarkMode">
        <span class="slider round"></span>
    </label>
    <span>Dark</span>
</div>

<p>@theme</p>

<div class="account-buttons">

    <AuthorizeView>
        <Authorized>
            <a class="user-logged-in" href="/Account/Manage"><img class="user-profile-pic" src="/images/doomguy.jpg" alt="Profile picture of user.FirstName user.LastName"></a>
        </Authorized>
        <NotAuthorized>
            <NavLink class="btn-gray" href="/Account/Login?returnUrl=%2FAccount%2FManage"><i class="fa-solid fa-arrow-right-to-bracket"></i><span>Sign in</span></NavLink>
            <NavLink class="btn-theme" href="/Account/Register"><i class="fa-solid fa-user"></i>Sign up</NavLink>
        </NotAuthorized>
    </AuthorizeView>

</div>

@code {
    private string? theme { get; set; }

    #region OLD CODE NOT USED
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            theme = await LoadLocalStorageData();
            themeService.Theme = theme;
            await UpdateBodyClassAsync(theme);
        }
    }

    private async Task ToggleDarkMode()
    {
        switch (theme)
        {
            case "dark":
                theme = "light";
                break;
            case "light":
                theme = "dark";
                break;
        }
        themeService.Theme = theme;
        await UpdateBodyClassAsync(theme);
        await SetItemInLocalStorage("theme", theme);
    }
    
    private async Task UpdateBodyClassAsync(string theme)
    {
        await JSRuntime.InvokeVoidAsync("setBodyClass", theme);
    }

    private async Task<string> LoadLocalStorageData()
    {
        var CheckTheme = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "theme");
        return CheckTheme;
    }

    private async Task SetItemInLocalStorage(string key, string value)
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, value);
    }
    #endregion
}