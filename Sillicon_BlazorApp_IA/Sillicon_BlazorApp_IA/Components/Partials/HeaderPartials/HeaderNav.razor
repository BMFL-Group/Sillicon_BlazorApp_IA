@using Sillicon_BlazorApp_IA.Controllers
@inject SiteSettings siteSettings

<div id="menu">
    <nav>
        <NavLink class="menu-link" href="/#overview">Overview</NavLink>
        <NavLink class="menu-link" href="/#features">Features</NavLink>
        <NavLink class="menu-link" href="/contact">Contact</NavLink>

        <AuthorizeView>
            <Authorized>
                <NavLink class="menu-link" href="/courses">Courses</NavLink>
            </Authorized>
        </AuthorizeView>

    </nav>
</div>

<div class="btn-switch">
    <span>Light</span>
    <label class="switch">
        <input type="checkbox" id="switchMode" checked="@IsDarkMode" role="checkbox" @onclick="ToggleDarkMode">
        <span class="slider round"></span>
    </label>
    <span>Dark</span>
</div>

<p>@Theme</p>

<div class="account-buttons">

    <AuthorizeView>
        <Authorized>
            <a class="user-logged-in" href="/Account/Manage"><img class="user-profile-pic" src="/uploads/user.ProfileImageUrl" alt="Profile picture of user.FirstName user.LastName"></a>
        </Authorized>
        <NotAuthorized>
            <NavLink class="btn-gray" href="/Account/Login?returnUrl=%2FAccount%2FManage"><i class="fa-solid fa-arrow-right-to-bracket"></i><span>Sign in</span></NavLink>
            <NavLink class="btn-theme" href="/Account/Register"><i class="fa-solid fa-user"></i>Sign up</NavLink>
        </NotAuthorized>
    </AuthorizeView>

</div>

@code {
    [CascadingParameter(Name = "ModePolicy")]
    public string Theme { get; set; } = null!;

    private bool IsDarkMode { get; set; } = false;

    private async Task ToggleDarkMode()
    {
        IsDarkMode = !IsDarkMode;
        var themeString = IsDarkMode ? "dark" : "light";
        await ChangeTheme(themeString);
    }

    private async Task ChangeTheme(string themeString)
    {
        try
        {
            var baseUrl = navigationManager.BaseUri;
            var apiUrl = baseUrl.TrimEnd('/') + "/api/changetheme";
            var response = await client.GetAsync($"{apiUrl}/{themeString}");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                // Theme = result!;
                StateHasChanged();
            }            
        }
        catch (Exception ex)
        {
            //Handle exception here
        }
    }
}