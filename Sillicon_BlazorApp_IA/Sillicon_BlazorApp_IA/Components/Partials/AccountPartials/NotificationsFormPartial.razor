@using Infrastructure.Models.Forms
@rendermode InteractiveServer

<EditForm Model="Form" FormName="form" OnValidSubmit="SubscribeSubmit" novalidate>
    <DataAnnotationsValidator />
    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <div class="success-message">@StatusMessage</div>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="error-message">@ErrorMessage</div>
    }

    <div class="input-group">
        <label for="Email">Preferred email for notifications</label>
        <InputText @bind-Value="Form!.Email" id="Email" placeholder="example@gamil.com" />
        <ValidationMessage For="() => Form.Email" />
    </div>
    <div class="switch-group">
        <div class="btn-switch">
            <label for="Subscribe" class="switch">
                <InputCheckbox @bind-Value="Form.Subscribe" id="Subscribe" checked="CheckSubscription()" />
                <span class="slider round"></span>
                <ValidationMessage For="() => Form.Subscribe" />
            </label>
            <span>Subscribe to newsletter</span>
        </div>
        <p>Nec, posuere non felis duis massa vitae aliquet interdum scelerisque. Neque ullamcorper.</p>
    </div>
    <div class="switch-group">
        <div class="btn-switch">
            <label class="switch">
                <input type="checkbox" id="switchMode" @onclick="ChangeValue" @bind="Theme" role="checkbox">
                <span class="slider round"></span>
            </label>
            <span>Use darkmode theme in application</span>
        </div>
        <p>Tortor massa porttitor enim tristique neque fermentum sed.</p>

    </div>
    <div class="form-buttons">
        <button type="submit" class="btn-theme">Save changes</button>
        <button type="reset" class="btn-gray">Cancel</button>
    </div>
</EditForm>

@inject IHttpContextAccessor hca

@code {

    [Parameter]
    public SubscribeForm? Form { get; set; }

    [Parameter]
    public ApplicationUser? User { get; set; }

    private string? StatusMessage { get; set; }
    private string? ErrorMessage { get; set; }
    private string? htmlMessage;

    [Parameter]
    public bool Theme { get; set; }
    private string? ReturnUrl;

    protected override async Task OnInitializedAsync()
    {
        if (hca != null)
            ReturnUrl = navigationManager.Uri;
    }

    private void CreateCookie()
    {
        ReturnUrl = navigationManager.Uri;
        navigationManager.NavigateTo($"/darkmode?ReturnUrl={ReturnUrl}");
    }

    private void DeleteCookie()
    {
        ReturnUrl = navigationManager.Uri;
        navigationManager.NavigateTo($"/deletedarkmode?ReturnUrl={ReturnUrl}");
    }

    private void ChangeValue()
    {
        Theme = !Theme;
        SetValue(Theme);
    }

    private void SetValue(bool value)
    {
        if (value)
            CreateCookie();
        else
            DeleteCookie();
    }

    private async Task SubscribeSubmit(EditContext context)
    {
        StatusMessage = "";
        ErrorMessage = "";

        if (User != null && Form != null && Form.Email != null)
        {
            var subscibeModel = new SubscribeModel { Email = Form.Email };

            if (Form.Subscribe == true)
            {
                try
                {
                    var result = await client.PostAsJsonAsync($"{_configuration["ConnectionStrings:Subscribe"]}", subscibeModel);

                    if (result.IsSuccessStatusCode)
                    {
                        htmlMessage = $@"We just wanted to extend a warm and heartfelt thank you for subscribing to our newsletter.<br> We truly appreciate
                                                    your support and look forward to sharing our latest news, updates, and exclusive offers with you.<br><br>
                                                    If you have any questions or feedback, please don't hesitate to reach out. We're here to assist you in any way<br>
                                                    we can.<br><br>
                                                    Thank you once again for your trust and engagement!<br><br>
                                                    Best regards";

                        string htmlBody = _queuesAndHttpRequestsService.HtmlBody("Subscription", User.FirstName, htmlMessage);
                        var newEmail = AutoMapper.MapNewSubscriptionModel(User.Email!, "Subscription", htmlBody, $"Thank you for subscribing {User.FirstName}!");
                        var servicebusResult = await _queuesAndHttpRequestsService.SendToEmailQueue(newEmail, $"{_configuration["ConnectionStrings:EmailRequestQueue"]}", "email_request");
                        if (servicebusResult == true)
                            StatusMessage = "You are now a subscriber!";       
                    }
                }
                catch (Exception e) { Debug.WriteLine($"Error at SubscribeSubmit: {e.Message}"); }
            }
            else
            {
                var result = await client.PostAsJsonAsync($"{_configuration["ConnectionStrings:UnSubscribe"]}", subscibeModel);
                if (result.IsSuccessStatusCode)
                {
                    htmlMessage = $@"We are writing to confirm that your subscription to our newsletter has been successfully canceled.<br> We truly appreciate
                                                    We’re sorry to see you go, but we respect your decision.<br><br>
                                                    If you have any questions or if there's anything we can do to improve our service, please don't hesitate to reach out. Your feedback is valuable to us.<br><br>
                                                    Thank you for being a part of our community.<br><br>
                                                    Best regards";

                    string htmlBody = _queuesAndHttpRequestsService.HtmlBody("Confirmation of Unsubscription", User.FirstName, htmlMessage);
                    var cancelEmail = AutoMapper.MapNewSubscriptionModel(User.Email!, "Confirmation of Unsubscription", htmlBody, "Confirmation of Unsubscription");
                    var servicebusResult = await _queuesAndHttpRequestsService.SendToEmailQueue(cancelEmail, $"{_configuration["ConnectionStrings:EmailRequestQueue"]}", "email_request");
                    if (servicebusResult == true)
                        ErrorMessage = "You have ended your subscription.";
                }
            }
        }
    }
}

