
<EditForm novalidate Model="Model" FormName="model" OnValidSubmit="ChangePassword">
    <h5>Password</h5>

    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
        <div class="success-message">@SuccessMessage</div>
    }
    else if (!string.IsNullOrEmpty(ErrorMessageMessage))
    {
        <div class="error-message">@ErrorMessageMessage</div>
    }

    <DataAnnotationsValidator />

    <div id="form-password" class="input-group">
        <label for="password">Current password</label>
        <InputText @bind-Value="Model.Password" type="password" placeholder="Enter your current password" id="password" />
        <ValidationMessage For="() => Model.Password" />
    </div>

    <div class="password-inputs">
        <div id="form-newPassword" class="input-group">
            <label for="newPassword">New password</label>
            <InputText @bind-Value="Model.NewPassword" type="password" placeholder="Enter new password" id="newPassword" />
            <ValidationMessage For="() => Model.NewPassword" />
        </div>

        <div id="form-confirmPassword" class="input-group">
            <label for="confirmPassword">Confirm password</label>
            <InputText @bind-Value="Model.ConfirmPassword" type="password" placeholder="Confirm password" id="confirmPassword" />
            <ValidationMessage For="() => Model.ConfirmPassword" />
        </div>
    </div>

    <div class="buttons">
        <button class="btn-gray">Cancel</button>
        <button type="submit" class="btn-theme">Change password</button>
    </div>
    <hr />
</EditForm>

@code {

    [SupplyParameterFromForm(FormName ="model")]
    private SecurityFormModel Model { get; set; } = new();

    [CascadingParameter]
    private HttpContext? Context { get; set; } = default!;

    [SupplyParameterFromQuery]
    public string? StatusMsg { get; set; }

    [Parameter]
    public ApplicationUser? User { get; set; }

    private string? ErrorMessageMessage { get; set; }
    private string? SuccessMessage { get; set; }

    private async Task ChangePassword()
    {
        if (Context != null && User != null && await _userManager.CheckPasswordAsync(User, Model.Password))
        {
            try
            {
                var result = await _userManager.ChangePasswordAsync(User, Model.Password, Model.NewPassword);
                if (result.Succeeded)
                    SuccessMessage = "Password changed successfully";
                else
                    ErrorMessageMessage = "Something went wrong, try again later..";
            }
            catch (Exception e) { Debug.WriteLine($"Error change password method: {e.Message}"); }
        }
        else
            ErrorMessageMessage = "Wrong password";
    }
}

