@if (!string.IsNullOrEmpty(StatusMsg))
{
    <div class="error">@StatusMsg</div>
}

<EditForm FormName="signinform" Model="SignInForm" OnValidSubmit="OnValidSubmit" method="post" novalidate>
    <DataAnnotationsValidator />
    <div id="form-email" class="input-group">
        <label for="Email">Email address</label>
        <InputText type="email" @bind-Value="SignInForm.Email" id="Email" placeholder="Enter your email address" />
        <ValidationMessage For="() => SignInForm.Email" />
    </div>
    <div id="form-password" class="input-group">
        <label for="Password">Password</label>
        <InputText type="password" @bind-Value="SignInForm.Password" id="Password" placeholder="Enter your password" />
        <ValidationMessage For="() => SignInForm.Password" />
    </div>
    <div id="form-remeber" class="checkbox-group">
        <div class="checkbox">
            <InputCheckbox id="Remember" @bind-Value="SignInForm.Remember" />
            <label for="Remember">Remeber me</label>
        </div>
    </div>
    <button type="submit" class="btn-theme">Sign in</button>
</EditForm>

@code {

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? StatusMsg { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private SignInFormModel SignInForm { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext != null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task OnValidSubmit(EditContext editContext)
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        try
        {
            var result = await _signInManager.PasswordSignInAsync(SignInForm.Email, SignInForm.Password, SignInForm.Remember, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                _logger.LogInformation("User logged in.");
                _redirectManager.RedirectTo(ReturnUrl);
            }
            else if (result.RequiresTwoFactor)
            {
                _redirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = SignInForm.Remember });
            }
            else if (result.IsLockedOut)
            {
                _logger.LogWarning("User account locked out.");
                _redirectManager.RedirectTo("Account/Lockout");
            }
            else
            {
                StatusMsg = "Error: Invalid login attempt.";
            }
        }
        catch (Exception e)
        {
            Debug.WriteLine($"Error: {e.Message}");
            StatusMsg = "An error occurred.";
            return;
        }
    }
}
