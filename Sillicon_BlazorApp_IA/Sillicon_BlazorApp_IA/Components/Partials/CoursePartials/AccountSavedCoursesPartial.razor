
<div class="courses">

    <div class="top-wrapper">
        <h1 class="title">Saved Items</h1>
        <button class="btn-delete-all" @onclick="HandleDeleteAll"><i class="fa-light fa-trash"></i> Delete all</button>
    </div>

    <div class="grid-container">
        @if (Courses != null && Courses.Count() > 0 && savedCourses != null && savedCourses.Count() > 0)
        {
            foreach (var course in Courses)
            {
                foreach (var savedCourse in savedCourses)
                {
                    if (savedCourse.Courseid == course.Id)
                    {
                        @*add logic to navigate in this div*@
                        <form class="bookmark-form" id="bookmarkForm">

                            <div class="grid-item card">
                                <div class="img-wrapper">
                                    <img class="course-image" src="/img/courses/@course.ImageUri" alt="@course.AltText">
                                    <p class="@(course.BestSeller ? "best-seller" : "hidden")">Best Seller</p>
                                </div>

                                <HandleBookmarkPartial SavedCourse="@savedCourse" Course="@course" UserId="@UserId" />

                                <div class="text-wrapper">

                                    <div class="text-title">
                                        <h5 class="course-title">@course.Title</h5>
                                    </div>

                                    <div class="text-rest">
                                        <span class="by">By</span>
                                        @if (course.Authors != null && course.Authors.Count() > 0)
                                        {
                                            int i = 0;
                                            foreach (var author in course.Authors)
                                            {
                                                <span class="author">@author.Name</span>
                                                i++;
                                                if (course.Authors.Count() != i)
                                                {
                                                    <span> & </span>
                                                }
                                            }
                                        }
                                        <div class="price-wrapper">
                                            <div class="@(course.DiscountPrice >= 1 ? "discount-price" : "hidden")">@course.Currency@course.DiscountPrice.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)</div>
                                            <div class="@(course.DiscountPrice >= 1 ? "price discount-applied" : "price")">@course.Currency@course.Price.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture)</div>
                                        </div>
                                        <div class="divider"></div>
                                        <div class="description-wrapper">
                                            @{
                                                double likesInK = Math.Max(0, (Math.Round(course.NumberOfLikes / 1000.0, 1)));

                                                <span class="description"><i class="fa-light fa-clock"></i> @course.LengthInHours hours</span>
                                                <span class="description"><i class="fa-light fa-thumbs-up"></i> @course.RatingInPercentage% (@likesInK K)</span>
                                            }
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </form>
                    }
                }
            }
        }

    </div>


</div>

@code {
    [CascadingParameter]
    private HttpContext? _context { get; set; } = default;

    private IEnumerable<Course> Courses { get; set; } = null!;

    private string UserId { get; set; } = null!;

    private IEnumerable<SavedCoursesModel> savedCourses { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        if (_context != null)
        {
            var user = await _userManager.GetUserAsync(_context.User);
            if (user != null)
            {
                UserId = user.Id;
            }
        }
        var saveCoursesResponse = await _coursesService.GetSavedCoursesAsync(UserId);
        if (saveCoursesResponse != null && saveCoursesResponse.Count() > 0)
        {
            savedCourses = saveCoursesResponse;
        }

        var coursesToFetchResponse = await _coursesService.GetAllCoursesAsync(string.Empty, string.Empty, 1, 9999);
        if (coursesToFetchResponse != null)
        {
            Courses = coursesToFetchResponse.Courses;
            //StateHasChanged();
        }
    }  

    // public async Task HandleBookmark(string courseId, bool isCourseBookmarked, bool hasJoinedCourse)
    // {
    //     SavedCoursesModel bookmarkedCourse = new()
    //         {
    //             Courseid = courseId,
    //             UserId = UserId,
    //             IsBookmarked = !isCourseBookmarked,
    //             HasJoined = hasJoinedCourse

    //         };

    //     var json = JsonConvert.SerializeObject(bookmarkedCourse);
    //     var content = new StringContent(json, Encoding.UTF8, "application/json");

    //     var response = await client.PostAsync("https://localhost:7251/api/SavedCourses", content);
    //     if (response.IsSuccessStatusCode)
    //     {
    //         //add logic for modal to show tha course was added or similar.
    //     }
    // }

    private async Task HandleDeleteAll()
    {

    }
}
