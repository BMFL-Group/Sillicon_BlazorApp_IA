@page "/Account/ExternalLogin"

<PageTitle>Register</PageTitle>
<StatusMessage Message="@message" />

<section id="external-login">
    <div class="container">
        <h1>Register</h1>
        <h2>Associate your @ProviderDisplayName account.</h2>
        <hr />
        <div class="success-message">
            You've successfully authenticated with <strong>@ProviderDisplayName</strong>.
            Please enter an email address for this site below and click the Register button to finish
            logging in.
        </div>
        <div class="form">
            <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="input-group">
                    <label for="email">Email</label>
                    <InputText @bind-Value="Input.Email" autocomplete="email" placeholder="Please enter your email." />
                    <ValidationMessage For="() => Input.Email" />
                </div>
                <button type="submit" class="btn-theme">Register</button>
            </EditForm>
        </div>
    </div>
</section>

@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string? message;
    private ExternalLoginInfo externalLoginInfo = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    private string? ProviderDisplayName => externalLoginInfo.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
            _redirectManager.RedirectToWithStatus("Account/Login", $"Error from external provider: {RemoteError}", HttpContext);

        var info = await _signInManager.GetExternalLoginInfoAsync();
        if (info is null)
            _redirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);

        externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }
            _redirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        var result = await _signInManager.ExternalLoginSignInAsync(
            externalLoginInfo.LoginProvider,
            externalLoginInfo.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true);

        if (result.Succeeded)
        {
            _logger.LogInformation(
                $"{Input.Email} logged in with {ProviderDisplayName} provider.",
                externalLoginInfo.Principal.Identity?.Name,
                externalLoginInfo.LoginProvider);
            _redirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
            _redirectManager.RedirectTo("Account/Lockout");

        if (externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
            Input.Email = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
    }

    private async Task OnValidSubmitAsync()
    {
        var emailStore = GetEmailStore();
        var user = CreateUser();

        await _userStore.SetUserNameAsync(user, $"{Input.Email}.external{ProviderDisplayName}", CancellationToken.None);
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        user.FirstName = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.GivenName)!;
        user.LastName = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Surname ?? "")!;
        user.EmailConfirmed = true; //ändra tillbaka?
        user.IsExternalAccount = true;

        var result = await _userManager.CreateAsync(user);
        if (result.Succeeded)
        {
            result = await _userManager.AddLoginAsync(user, externalLoginInfo);
            if (result.Succeeded)
            {
                // _logger.LogInformation($"User created an account using {ProviderDisplayName} provider.", externalLoginInfo.LoginProvider);

                // var userId = await _userManager.GetUserIdAsync(user);
                // var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                // code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

                // var callbackUrl = navigationManager.GetUriWithQueryParameters(
                //     navigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                //     new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
                // await _emailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

                // If account confirmation is required, we need to show the link if we don't have a real email sender
                // if (_userManager.Options.SignIn.RequireConfirmedAccount)
                // {
                //     _redirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = Input.Email });
                // }

                await _signInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);
                _redirectManager.RedirectTo(ReturnUrl);
            }
        }

        message = $"Error: {string.Join(",", result.Errors.Select(error => error.Description))}";
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!_userManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)_userStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
