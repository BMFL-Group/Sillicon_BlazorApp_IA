@page "/Account/ChangePasswordConfirmation"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@rendermode InteractiveServer

<PageTitle>Password confirmation</PageTitle>
<section id="confirmation">
    <div class="container">
        <div class="content">
            <h1>Password confirmation</h1>
            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <div class="success-message">@SuccessMessage</div>
            }
            else if (!string.IsNullOrEmpty(ErrorMessageMessage))
            {
                <div class="error-message">@ErrorMessageMessage</div>
            }
            <p>Didn't recive an email? <button class="btn-gray" @onclick="ResendCode">resend email</button></p>
            <EditForm FormName="confirmform" Model="ConfirmForm" OnValidSubmit="OnValidSubmit" novalidate>
                <DataAnnotationsValidator />
                <div class="input-group">
                    <label for="Code">Enter your code</label>
                    <InputText @bind-Value="ConfirmForm.Code" id="Code" placeholder="Code..." />
                    <ValidationMessage For="() => ConfirmForm.Code" />
                </div>
                <button type="submit" class="btn-theme">Verify</button>
            </EditForm>
        </div>
    </div>
</section>

@inject SensitiveData sensitiveData
@code {

    [SupplyParameterFromForm(Name = "confirmform")]
    ConfirmPasswordChangeForm ConfirmForm { get; set; } = new();

    private string? NewPassword { get; set; }
    private string? OldPassword { get; set; }
    private string? Email { get; set; }

    private string? ErrorMessageMessage { get; set; }
    private string? SuccessMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NewPassword = sensitiveData.NewPassword;
        OldPassword = sensitiveData.NewPassword;
        Email = sensitiveData.Email;

        if (Email is null || NewPassword is null || OldPassword is null)
        {
            _redirectManager.RedirectTo("/security");
        }
    }

    protected async Task OnValidSubmit()
    {
        ErrorMessageMessage = "";
        SuccessMessage = "";

        var user = await _userManager.FindByEmailAsync(Email!);
        try
        {
            var codePackage = new VerifyCodeAndEmailModel { Email = sensitiveData.Email!, Code = ConfirmForm.Code };
            var result = await client.PostAsJsonAsync($"{_configuration["ConnectionStrings:VerificationProvider"]}", codePackage);
            if (result.IsSuccessStatusCode)
            {
                var response = await _userManager.ChangePasswordAsync(user!, sensitiveData.OldPassword, sensitiveData.NewPassword);
                if (!response.Succeeded)
                {
                    ErrorMessageMessage = "Code was incorrect, try agin or click \"Resend code to get a new one";
                    return;
                }                   
            }  
        }
        catch (Exception e) { Debug.WriteLine($"Error change password method: {e.Message}"); }

        SuccessMessage = "Password changed successfully";
        StateHasChanged();
        await Task.Delay(2000);
        navigationManager.NavigateTo("/security");
    }

    private async Task ResendCode()
    {
        var result = await _queuesAndHttpRequestsService.SendToVeificationlQueue(new VerifyEmailModel { Email = sensitiveData.Email! }, $"{_configuration["ConnectionStrings:VerificationQueue"]}", "verification_request");

        SuccessMessage = "Code resend";
        StateHasChanged();
        await Task.Delay(2000);
    }
}

