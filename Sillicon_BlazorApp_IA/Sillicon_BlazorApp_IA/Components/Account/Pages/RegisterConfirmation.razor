@page "/Account/RegisterConfirmation"
@rendermode InteractiveServer

<PageTitle>Register confirmation</PageTitle>
<section id="confirmation">
    <div class="container">
        <div class="content">
            <h1>Register confirmation</h1>
            @if (!string.IsNullOrEmpty(statusMessage))
            {
                <div class="error-msg">@statusMessage</div>

            }
            <p>Didn't recive an email? <button class="btn-gray" @onclick="ResendCode">resend email</button></p>
            <EditForm FormName="confirmform" Model="ConfirmForm" OnValidSubmit="OnValidSubmit" method="post" novalidate>
                <DataAnnotationsValidator />
                <div class="input-group">
                    <label for="Code">Enter your code</label>
                    <InputText @bind-Value="ConfirmForm.Code" id="Code" placeholder="Code..." />
                    <ValidationMessage For="() => ConfirmForm.Code" />
                </div>
                <button type="submit" class="btn-theme">Verify</button>
            </EditForm>
        </div>      
    </div>
</section>

@code {

    private string? statusMessage;

    [SupplyParameterFromForm]
    ConfirmFormAccountModel ConfirmForm { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            _redirectManager.RedirectTo("/Account/Login");
        }
        var user = await _userManager.FindByEmailAsync(Email);
        if (user is null)
        {
            _redirectManager.RedirectTo("/Account/Login");
        }
    }

    protected async Task OnValidSubmit()
    {
        if (ConfirmForm.Code != null)
        {
            var codePackage = new VerifyCodeAndEmailModel
                {
                    Email = Email!,
                    Code = ConfirmForm.Code
                };
            try
            {
                var result = await client.PostAsJsonAsync($"{_configuration["ConnectionStrings:VerificationProvider"]}", codePackage);
                if (result.IsSuccessStatusCode)
                {
                    var user = await _userManager.FindByEmailAsync(Email!);
                    if (user != null)
                    {
                        user.EmailConfirmed = true;
                        await _userManager.UpdateAsync(user);
                        navigationManager.NavigateTo("/");
                    }
                }
                else
                {
                    statusMessage = "Invalid code";
                    return;
                }
            }
            catch (Exception e) { Debug.WriteLine($"Error sending code to verificationProvider: {e}"); }
        }
    }

    private async Task ResendCode()
    {
        await using var client = new ServiceBusClient($"{_configuration["ConnectionStrings:VerificationQueue"]}");
        ServiceBusSender sender = client.CreateSender("verification_request");
        var json = JsonConvert.SerializeObject(new VerifyEmailModel { Email = Email! });
        ServiceBusMessage message = new ServiceBusMessage(json) { ContentType = "application/json" };
        await sender.SendMessageAsync(message);

        statusMessage = "Code resend";
    }
}
