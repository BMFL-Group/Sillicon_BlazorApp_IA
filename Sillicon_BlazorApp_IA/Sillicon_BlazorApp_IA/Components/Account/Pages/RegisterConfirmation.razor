@page "/Account/RegisterConfirmation"
@rendermode InteractiveServer

<PageTitle>Register confirmation</PageTitle>

<h1>Register confirmation</h1>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="error-msg">@statusMessage</div>

}
<p>Didn't recive an email? <button @onclick="ResendCode">resend email</button></p>
<EditForm FormName="confirmform" Model="ConfirmForm" OnValidSubmit="OnValidSubmit" method="post" novalidate>
    <DataAnnotationsValidator />
    <div class="input-group">
        <label for="Code">Enter your code</label>
        <InputText @bind-Value="ConfirmForm.Code" id="Code" placeholder="Code..." />
        <ValidationMessage For="() => ConfirmForm.Code" />
    </div>
    <button type="submit" class="btn-theme">Verify</button>
</EditForm>

@code {

    private string? statusMessage;

    [SupplyParameterFromForm]
    ConfirmFormAccountModel ConfirmForm { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            _redirectManager.RedirectTo("/Account/Login");
        }
        var user = await _userManager.FindByEmailAsync(Email);
        if (user is null)
        {
            _redirectManager.RedirectTo("/Account/Login");
        }
    }

    protected async Task OnValidSubmit()
    {
        if(ConfirmForm.Code != null)
        {
            var codePackage = new VerifyCodeAndEmailModel
                {
                    Email = Email!,
                    Code = ConfirmForm.Code
                };

            var result = await client.PostAsJsonAsync("https://verificationprovider-silicon-bmfl.azurewebsites.net/api/validate?code=GbOXUAI3llMgMuohXjxi-9FSb39XkUwlNmruMCxLZMH5AzFuIlLcNQ==", codePackage);
            if (result.IsSuccessStatusCode)
            {
                var user = await _userManager.FindByEmailAsync(Email!);
                if (user != null)
                {
                    user.EmailConfirmed = true;
                    await _userManager.UpdateAsync(user);

                    try
                    {
                        navigationManager.NavigateTo("/");
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("Error redirect to Login from verify success" + e);
                    }

                }
            }
            else
            {
                statusMessage = "Invalid code";
                return;
            }
        }
      
    }

    private async Task ResendCode()
    {
        var result = await client.PostAsJsonAsync("någon länk till kön", new { Email = Email });
        if (result.IsSuccessStatusCode)
        {
            statusMessage = "Code resend";
        }
        else
        {
            statusMessage = "Unable to resend code..";
        }
    }
}
