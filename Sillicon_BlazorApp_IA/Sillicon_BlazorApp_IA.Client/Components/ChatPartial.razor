@rendermode InteractiveAuto
@using Microsoft.AspNetCore.SignalR.Client
@inject AuthenticationStateProvider _authenticationStateProvider

<PageTitle>messages</PageTitle>

<section id="messages">
    <div class="container">
        <div class="row">

            <h2>Welcome!</h2>
            <h5>Sillicon supportchat</h5>

            <div class="col">
                <div class="card">
                    <div class="card-header">Ask us anything</div>
                    <div class="card-body message-container">
                        <div class="mt-3" style="height: 20px;">
                            @if (!string.IsNullOrEmpty(typingUser))
                            {
                                <div>@typingUser is typing <span>...</span></div>
                            }
                        </div>
                        <ul class="list-group">
                            @foreach (var message in messages)
                            {
                                <li class="mb-3 list-group-item @(message.UserName == userName ? "bubble-right" : "bubble-left")">
                                    <div><strong>@message.UserName</strong><span>@message.Created.ToString("HH:mm")</span></div>
                                    <div>@message.Message</div>
                                </li>
                            }
                        </ul>                      
                    </div>
                    <div class="card-footer">
                        <div class="mt-2">
                            <textarea class="form-control" placeholder="Message" @bind="currentMessage" @oninput="NotifyTyping"></textarea>
                        </div>
                        <div class="col-2 my-3">
                            <button class="btn-gray" @onclick="Send">Send Message</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {

    private HubConnection? connection;
    private bool isConnected => connection?.State == HubConnectionState.Connected;
    private string? userName;
    private string? typingUser;
    private System.Timers.Timer? typingTimer;

    private List<ChatMessage> messages = new();
    private string? currentMessage;

    private class ChatMessage
    {
        public string? Message { get; set; }
        public string? UserName { get; set; }
        public DateTime Created { get; set; } = DateTime.Now;
    }

    private async Task NotifyTyping() => await connection!.SendAsync("Typing", userName);

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(currentMessage))
        {
            var message = new ChatMessage { UserName = userName, Message = currentMessage };
            await connection!.SendAsync("SendMessageToAll", message.UserName, message.Message, message.Created);
            currentMessage = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
            userName = user.Identity.Name;
        else
            userName = "anonymous";

        connection = new HubConnectionBuilder().WithUrl(navigationManager.ToAbsoluteUri("/chathub")).Build();

        connection.On<string, string, DateTime>("ReceiveMessage", (fromUser, message, dateTime) =>
        {
            var newMessage = new ChatMessage { UserName = fromUser, Message = message, Created = dateTime };
            messages.Add(newMessage);
            InvokeAsync(StateHasChanged);
        });

        connection.On<string>("UserTyping", (typingUserName) =>
        {
            typingUser = typingUserName;
            InvokeAsync(StateHasChanged);

            typingTimer?.Stop();
            typingTimer = new System.Timers.Timer(2000);
            typingTimer.Elapsed += (s, e) =>
            {
                typingUser = null;
                InvokeAsync(StateHasChanged);
            };

            typingTimer.Start();
        });

        await connection.StartAsync();
    }
}
